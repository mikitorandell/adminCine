/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import admincine.recursosBD;
import admincine.FiltreArxius;
import admincine.CustomModel;
import entitats.Genere;
import entitats.Pase;
import entitats.Pelicula;
import entitats.Sala;
import java.awt.Checkbox;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileInputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.net.ftp.FTPClient;

/**
 *
 * @author torandell9
 */
public final class Inicial extends javax.swing.JFrame implements ItemListener {

    // TODO: posar l'opció de borrar pase, pero només si no hi ha cap reserva feta!
    private recursosBD rbd = new recursosBD();
    private Pelicula pEditar;
    private boolean afegirPeli = false;
    private ArrayList<Checkbox> checkboxGeneres;
    private ArrayList<String> generesSeleccionats = new ArrayList<String>();
    private FiltreArxius filter = new FiltreArxius();
    /**
     * *** PANEL PELICULES **
     */
    ArrayList<Pelicula> pelicules;
    //TableModel personalitzat per a les pel·lícules per a que les files no siguin editables
    CustomModel modelPelicules = new CustomModel(new String[]{"Titol", "Director", "duracio", "any"});
    /**
     * PANEL PASES
     */
    Date d;
    private ArrayList<Sala> sales;
    ArrayList<Pase> pases;
    //TableModel personalitzat per als pases per a que les files no siguin editables
    CustomModel modelPases = new CustomModel(new String[]{"Pel·lícula", "Día", "Hora", "Sala"});

    /**
     * Constructor inicial
     */
    public Inicial() {
        initComponents();
        this.omplirPelicules();

    }
    /**
     * Ompleix el model de pel·lícules carregant-les de la base de dades.
     */
    public void omplirPelicules() {
        this.modelPelicules.setRowCount(0);
        this.llistaPelicules.removeAllItems();//borra les pel·lícules que hi pugui haver dins el ComboBox
        this.llistaPelicules.addItem(" --- Seleccionar --- ");
        this.pelicules = rbd.getPelicules();
        for (Pelicula p : this.pelicules) {
            this.llistaPelicules.addItem(p.getTitol());//S'AFEGEIX AL DESPLEGABLE DE SELECCIÓ DE PEL·LÍCULA PER QUAN CREEN PASES
            this.modelPelicules.addRow(new Object[]{
                        p.getTitol(),
                        p.getDirector(),
                        p.getDuracio(),
                        p.getAny(),});
        }

        this.tablePelicules.setModel(this.modelPelicules); //aplica el model ja plé a la taula

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SeleccionarArxiu = new javax.swing.JFileChooser();
        popUpPelicules = new javax.swing.JPopupMenu();
        botoEditarPeli = new javax.swing.JMenuItem();
        botoBorrarPeli = new javax.swing.JMenuItem();
        dialogEditarPeli = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fieldTitol = new javax.swing.JTextField();
        fieldDuracio = new javax.swing.JTextField();
        fieldDirector = new javax.swing.JTextField();
        fieldAny = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        fieldSinopsis = new javax.swing.JTextArea();
        botoCancelarEditarPeli = new javax.swing.JButton();
        botoAceptarEditarPeli = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        fieldClassificacio = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        botoSeleccionarPortada = new javax.swing.JButton();
        rutaArxiu = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        dialogGeneres = new javax.swing.JDialog();
        dialogPase = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        selectorCalendari = new org.jdesktop.swingx.JXDatePicker();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        llistaPelicules = new javax.swing.JComboBox();
        horaPase = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        minutPase = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        comboSales = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelPelicules = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePelicules = new javax.swing.JTable();
        botoAfegirPeli = new javax.swing.JButton();
        panelPases = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablePases = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        botoEditarPeli.setText("Editar pel·lícula");
        botoEditarPeli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoEditarPeli(evt);
            }
        });
        popUpPelicules.add(botoEditarPeli);

        botoBorrarPeli.setText("Borrar pel·lícula");
        botoBorrarPeli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoBorrarPeliActionPerformed(evt);
            }
        });
        popUpPelicules.add(botoBorrarPeli);

        jLabel1.setText("Títol");

        jLabel2.setText("Duració");

        jLabel3.setText("Director");

        jLabel4.setText("Any");

        jLabel5.setText("Sinopsis");

        fieldAny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldAnyActionPerformed(evt);
            }
        });

        fieldSinopsis.setColumns(20);
        fieldSinopsis.setRows(5);
        jScrollPane2.setViewportView(fieldSinopsis);

        botoCancelarEditarPeli.setText("Cancelar");
        botoCancelarEditarPeli.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelarEdicio(evt);
            }
        });

        botoAceptarEditarPeli.setText("<html><b>Aceptar</b></html>");
        botoAceptarEditarPeli.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardarEdicio(evt);
            }
        });

        jLabel6.setText("Classificació ");

        fieldClassificacio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TP", "+8", "+12", "+18" }));

        jLabel7.setText("Portada");

        botoSeleccionarPortada.setText("Seleccionar imagen");
        botoSeleccionarPortada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botoSeleccionarPortadaMouseClicked(evt);
            }
        });

        jLabel8.setText("Gèneres");

        jButton1.setText("Seleccionar gèneres");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mostrarPopupGeneres(evt);
            }
        });

        org.jdesktop.layout.GroupLayout dialogEditarPeliLayout = new org.jdesktop.layout.GroupLayout(dialogEditarPeli.getContentPane());
        dialogEditarPeli.getContentPane().setLayout(dialogEditarPeliLayout);
        dialogEditarPeliLayout.setHorizontalGroup(
            dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dialogEditarPeliLayout.createSequentialGroup()
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(dialogEditarPeliLayout.createSequentialGroup()
                        .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(dialogEditarPeliLayout.createSequentialGroup()
                                .add(14, 14, 14)
                                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(dialogEditarPeliLayout.createSequentialGroup()
                                .add(16, 16, 16)
                                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(55, 55, 55)
                        .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(dialogEditarPeliLayout.createSequentialGroup()
                                .add(botoCancelarEditarPeli, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(botoAceptarEditarPeli))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, fieldClassificacio, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(fieldAny)
                            .add(fieldTitol)
                            .add(fieldDirector)
                            .add(fieldDuracio)
                            .add(dialogEditarPeliLayout.createSequentialGroup()
                                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(botoSeleccionarPortada, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                .add(18, 18, 18)
                                .add(rutaArxiu, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .add(dialogEditarPeliLayout.createSequentialGroup()
                        .add(16, 16, 16)
                        .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                                .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(278, 278, 278)))
                .addContainerGap())
        );
        dialogEditarPeliLayout.setVerticalGroup(
            dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dialogEditarPeliLayout.createSequentialGroup()
                .add(16, 16, 16)
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(fieldTitol, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(fieldDuracio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(fieldDirector, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(fieldAny, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(fieldClassificacio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(dialogEditarPeliLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(dialogEditarPeliLayout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(jLabel5)))
                .add(18, 18, 18)
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(botoSeleccionarPortada)
                    .add(jLabel7)
                    .add(rutaArxiu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 45, Short.MAX_VALUE)
                .add(dialogEditarPeliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(botoCancelarEditarPeli)
                    .add(botoAceptarEditarPeli, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        dialogGeneres.getContentPane().setLayout(new java.awt.FlowLayout());

        dialogPase.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                carregaDialogPase(evt);
            }
        });

        jLabel9.setText("Día:");

        jLabel10.setText("Hora: ");

        jButton3.setText("Cancelar");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tancarDialogPases(evt);
            }
        });

        jButton4.setText("<html><b>Aceptar</b></html>");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardarPase(evt);
            }
        });

        jLabel11.setText("Pel·lícula:");

        llistaPelicules.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        horaPase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        jLabel12.setText(":");

        minutPase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        minutPase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minutPaseActionPerformed(evt);
            }
        });

        jLabel13.setText("Sala:");

        org.jdesktop.layout.GroupLayout dialogPaseLayout = new org.jdesktop.layout.GroupLayout(dialogPase.getContentPane());
        dialogPase.getContentPane().setLayout(dialogPaseLayout);
        dialogPaseLayout.setHorizontalGroup(
            dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dialogPaseLayout.createSequentialGroup()
                .addContainerGap()
                .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(dialogPaseLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(32, 32, 32)
                        .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(selectorCalendari, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 359, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(dialogPaseLayout.createSequentialGroup()
                                    .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 177, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(dialogPaseLayout.createSequentialGroup()
                                .add(horaPase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel12)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(minutPase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(dialogPaseLayout.createSequentialGroup()
                        .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel11)
                            .add(jLabel13))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(llistaPelicules, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(comboSales, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        dialogPaseLayout.setVerticalGroup(
            dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dialogPaseLayout.createSequentialGroup()
                .add(15, 15, 15)
                .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(selectorCalendari, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(horaPase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12)
                    .add(minutPase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(llistaPelicules, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(comboSales, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel13))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(dialogPaseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton3)
                    .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(900, 21));

        tablePelicules.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablePelicules.setComponentPopupMenu(popUpPelicules);
        jScrollPane1.setViewportView(tablePelicules);

        botoAfegirPeli.setText("Afegir pel·lícula");
        botoAfegirPeli.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botoAfegirPeliMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout panelPeliculesLayout = new org.jdesktop.layout.GroupLayout(panelPelicules);
        panelPelicules.setLayout(panelPeliculesLayout);
        panelPeliculesLayout.setHorizontalGroup(
            panelPeliculesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelPeliculesLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelPeliculesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 986, Short.MAX_VALUE)
                    .add(botoAfegirPeli, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelPeliculesLayout.setVerticalGroup(
            panelPeliculesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelPeliculesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(botoAfegirPeli))
        );

        jTabbedPane1.addTab("Pel·lícules", panelPelicules);

        panelPases.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                carregaPases(evt);
            }
        });

        tablePases.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tablePases);

        jButton2.setText("Afegir Pase");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mostrarDialogAfegirPase(evt);
            }
        });

        org.jdesktop.layout.GroupLayout panelPasesLayout = new org.jdesktop.layout.GroupLayout(panelPases);
        panelPases.setLayout(panelPasesLayout);
        panelPasesLayout.setHorizontalGroup(
            panelPasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelPasesLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelPasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 986, Short.MAX_VALUE)
                    .add(jScrollPane3))
                .addContainerGap())
        );
        panelPasesLayout.setVerticalGroup(
            panelPasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelPasesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton2))
        );

        jTabbedPane1.addTab("Pases", panelPases);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 998, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 451, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Estadístiques", jPanel1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Listener quan fan click al botó del menú 'Desplegar pel·lícula'
     * TODO: demanar confirmació abans de borrar
     * @param evt 
     */
    private void botoBorrarPeliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoBorrarPeliActionPerformed
        rbd.borrarPelicula(this.pelicules.get(this.tablePelicules.getSelectedRow()));
        this.omplirPelicules();
        this.mostrarAlert("Pel·lícula borrada satisfactoriament");
    }//GEN-LAST:event_botoBorrarPeliActionPerformed

    /**
     * Listener de quan apreten el botó per editar la pel·lícula
     * Basicament ompleix el formulari amb els valos per defecte de la pel·lícula
     * @param evt 
     */
    private void botoEditarPeli(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoEditarPeli
        //OMPLIR ELS CAMPS
        this.afegirPeli = false;
        this.fieldAny.setText(this.pelicules.get(this.tablePelicules.getSelectedRow()).getAny() + "");
        this.fieldDirector.setText(this.pelicules.get(this.tablePelicules.getSelectedRow()).getDirector());
        this.fieldDuracio.setText(this.pelicules.get(this.tablePelicules.getSelectedRow()).getDuracio() + "");
        this.fieldSinopsis.setText(this.pelicules.get(this.tablePelicules.getSelectedRow()).getSinopsis());
        this.fieldTitol.setText(this.pelicules.get(this.tablePelicules.getSelectedRow()).getTitol());
        this.fieldClassificacio.setSelectedItem(this.pelicules.get(this.tablePelicules.getSelectedRow()).getClassificacio());
        //asignar la pel·lícula a una variable d'instància per editar-la
        this.pEditar = this.pelicules.get(this.tablePelicules.getSelectedRow());
        this.rutaArxiu.setText(this.pelicules.get(this.tablePelicules.getSelectedRow()).getRutaImatge());
        this.dialogEditarPeli.setSize(680, 450);
        this.dialogEditarPeli.setLocationRelativeTo(null);
        this.dialogEditarPeli.setVisible(true);
        this.mostrarCheckBoxGeneres();
    }//GEN-LAST:event_botoEditarPeli
//GEN-FIRST:event_guardarEdicio
//GEN-LAST:event_guardarEdicio
    /**
     * Listener quan apreten el botó de cancelar edició de la pel·lícula
     * Basicament fa el dialog invisible.
     * @param evt 
     */
    private void cancelarEdicio(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarEdicio
        this.dialogEditarPeli.dispose();
        this.dialogEditarPeli.setVisible(false);
    }//GEN-LAST:event_cancelarEdicio

    private void fieldAnyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldAnyActionPerformed
        // TODO: borrarme
    }//GEN-LAST:event_fieldAnyActionPerformed
    
    /**
     * Listener per el botó de seleccionar portada de la pel·lícula.
     * mostra un JFileChooser amb el filtre personalitzat perque nomes accepti arxius JPEG ó JPG
     * @param evt 
     */
    private void botoSeleccionarPortadaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botoSeleccionarPortadaMouseClicked
        this.SeleccionarArxiu.setFileFilter(this.filter);
        int resultat = this.SeleccionarArxiu.showOpenDialog(null);
        if (resultat == JFileChooser.APPROVE_OPTION) {
            File portada = this.SeleccionarArxiu.getSelectedFile();
            this.rutaArxiu.setText(portada.getAbsolutePath());
        }
    }//GEN-LAST:event_botoSeleccionarPortadaMouseClicked

    /**
     * Listener per quan fan click al botó d'afegir pel·lícula.
     * Posa els camps buids, per si a cas ja estaven plens d'abans, i mostra el JDialog.
     * @param evt 
     */
    private void botoAfegirPeliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botoAfegirPeliMouseClicked
        this.afegirPeli = true;
        //BUIDAM ELS CAMPS
        this.fieldAny.setText("");
        this.fieldDirector.setText("");
        this.fieldDuracio.setText("");
        this.fieldSinopsis.setText("");
        this.fieldTitol.setText("");
        this.fieldClassificacio.setSelectedIndex(0);
        //asignar la pel·lícula a una variable d'instància per editar-la
        this.rutaArxiu.setText("");
        this.pEditar = new Pelicula();
        this.mostrarCheckBoxGeneres();
        this.dialogEditarPeli.setSize(680, 450);
        this.dialogEditarPeli.setLocationRelativeTo(null);
        this.dialogEditarPeli.setVisible(true);
    }//GEN-LAST:event_botoAfegirPeliMouseClicked
    /**
     * Per cada un dels gèneres possibles que hi ha dins la base de dades, genera un checkbox i el fica dins el jDialgog.
     */
    private void mostrarCheckBoxGeneres() {
        this.checkboxGeneres = new ArrayList<Checkbox>();
        dialogGeneres.getContentPane().removeAll();
        for (Genere g : rbd.getGeneres()) {
            Checkbox cb = new Checkbox(g.getTitol());
            dialogGeneres.getContentPane().add(cb);
            this.checkboxGeneres.add(cb);
            cb.setLabel(g.getTitol());
            if (this.pEditar.getGeneres().contains(g)) {
                cb.setState(true);
            }
            cb.addItemListener(this);
        }

    }
    /**
     * Obri un pocup que contendrà els checkbox per cada un dels gèneres.
     * @param evt 
     */
    private void mostrarPopupGeneres(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mostrarPopupGeneres

        this.dialogGeneres.setVisible(true);
        this.dialogGeneres.setSize(680, 450);
        this.dialogGeneres.setLocationRelativeTo(null);
    }//GEN-LAST:event_mostrarPopupGeneres

    /**
     * Métode que es crida quan es fa visible el panel de Pases
     * @param evt
     */
    private void carregaPases(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_carregaPases
        if (this.pases == null) { //NOMÉS CARREGA ELS PASES SI ESTA BUID
            this.omplirPases();
        }
    }//GEN-LAST:event_carregaPases

    /**
     * Fa visible un jDialog per afegir un pase.
     * @param evt 
     */
    private void mostrarDialogAfegirPase(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mostrarDialogAfegirPase
        this.dialogPase.setSize(500, 300);
        this.dialogPase.setVisible(true);
        this.dialogPase.setLocationRelativeTo(null);
    }//GEN-LAST:event_mostrarDialogAfegirPase
    /**
     * Tanca el jDialog per crear pases
     *
     * @param evt
     */
    private void tancarDialogPases(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tancarDialogPases
        this.dialogPase.dispose();
    }//GEN-LAST:event_tancarDialogPases

    /**
     * Fa les comprobacions perque el pase sigui correcte (que els camps no
     * estiguin buids, i que la data del pase sigui MAJOR que avui)
     *
     * @return
     */
    private boolean validarPase() {

        try {
            Date d;
            d = this.selectorCalendari.getDate();

            //VALIDA QUE LA DATA NO SIGUI PASADA
            Calendar c = new GregorianCalendar();
            c.set(Calendar.HOUR_OF_DAY, 0); //anything 0 - 23
            c.set(Calendar.MINUTE, 0);
            c.set(Calendar.SECOND, 0);
            Date d1 = c.getTime();
            if (this.selectorCalendari.getDate().before(d1)) {
                this.mostrarAlert("Els pases s'han de posar al manco amb un día d'antelació.");
                return false;
            }

            //VALIDA QUE HAGIN SELECCIONAT ALGUNA PELI
            if (this.llistaPelicules.getSelectedIndex() < 1) {
                this.mostrarAlert("Selecciona una pel·lícula!");
                return false;
            }
            if (this.comboSales.getSelectedIndex() < 1) {
                this.mostrarAlert("Selecciona alguna sala!");
                return false;
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            this.mostrarAlert("Posa una data vàlida!");
            return false;
        }
        return true;
    }

    /**
     * Si el pase es vàlid, el guarda dins la base de dades.
     *
     * @param evt
     */
    private void guardarPase(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarPase
        if (this.validarPase()) {
            try {
                Pase p = new Pase();
                p.setDia(this.selectorCalendari.getDate());
                SimpleDateFormat ft = new SimpleDateFormat("HH:mm:ss");
                p.setPelicula(this.pelicules.get(this.llistaPelicules.getSelectedIndex() - 1));

                p.setHora(ft.parse(this.horaPase.getSelectedItem() + ":" + this.minutPase.getSelectedItem() + ":00"));
                //p.setHora(ft.parse("23:00:00"));
                p.setSala(this.sales.get(this.comboSales.getSelectedIndex() - 1));
                rbd.guardarPase(p);
                //Reseteam els pases que hi havia en memòria perque torni a carregar el nou
                this.omplirPases();
                this.mostrarAlert("Pase guardat!");
                this.dialogPase.dispose();


            } catch (ParseException ex) {
                Logger.getLogger(Inicial.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_guardarPase
    private void minutPaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minutPaseActionPerformed
        // TODO:borrarme
    }//GEN-LAST:event_minutPaseActionPerformed

    /**
     * Mostra el dialog per crear pases. Carrega les sales, etc..ñ
     * @param evt
     */
    private void carregaDialogPase(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_carregaDialogPase
        this.sales = new ArrayList<Sala>();
        this.comboSales.removeAllItems();

        this.comboSales.addItem(" --- Selecciona una sala --- ");

        for (Sala s : rbd.getSales()) {
            this.sales.add(s);
            this.comboSales.addItem(s.getNom());
        }
    }//GEN-LAST:event_carregaDialogPase

    /**
     * Carrega el model de la taula de Pases amb tots el pases disponibles (a  partir d'avui)
     * @modelPases amb els pases que extreu de la base de dades.
     */
    private void omplirPases() {
        System.out.println("carregam els pases");
        this.modelPases.setRowCount(0); //reinicia el model
        this.pases = rbd.getPases(); // carrega l'arraylist de pases
        this.tablePases.repaint();
        this.tablePases.validate();//TODO: aplicar el rowsorter

        for (Pase p : this.pases) {
            this.modelPases.addRow(new Object[]{
                        p.getPelicula().getTitol(),
                        p.getDia(),
                        p.getHora(),
                        p.getSala().getNom(),});
        }

        this.tablePases.setModel(this.modelPases); //aplicam el model a la taula
    }

    /**
     * Escoltador dels checkbox per assignar gèneres. Fica dins un ArrayList els
     * que estan activats, i borra els que no hi estan.
     *
     * @param e
     */
    public void itemStateChanged(ItemEvent e) {
        for (Checkbox cb : this.checkboxGeneres) {
            if (cb.getState()) {
                this.generesSeleccionats.add(cb.getLabel());
            } else {
                this.generesSeleccionats.remove(cb.getLabel());
            }
        }
    }

    /**
     * Valida tots els camps del formulari de creació / edició de pel·lícules i
     * mostra els missatges d'error oportuns.
     *
     * @return
     */
    private boolean validarCamps() {
        // VALIDA EL TÍTOL
        if (this.fieldTitol.getText().equals("")) {
            this.mostrarAlert("Fica un títol");
            return false;
        }
        //VALIDA LA DURACIÓ
        try {
            Integer.parseInt(this.fieldDuracio.getText());
        } catch (NumberFormatException e) {
            this.mostrarAlert("Posa una duraciò vàlida!!");
            return false;
        }
        //VALIDA EL NOM DEL DIRECTOR
        if (this.fieldDirector.getText().equals("")) {
            this.mostrarAlert("Posa un director!");
            return false;

        }
        //VALIDA L'ANY
        try {
            Integer.parseInt(this.fieldAny.getText());
        } catch (NumberFormatException e) {
            this.mostrarAlert("Posa un any vàlid!!");
            return false;
        }

        //VALIDA LA SINOPSIS
        if (this.fieldSinopsis.getText().equals("")) {
            this.mostrarAlert("Escriu de que va la peli!!");
        }

        //VALIDA LA PORTADA
        if (this.afegirPeli && this.rutaArxiu.getText().equals("")) {
            this.mostrarAlert("Fica una imatge!!!");
            return false;
        }

        //VALIDA ELS GÈNERES
        if (this.generesSeleccionats.size() == 0) {
            this.mostrarAlert("posa algún gènere!!");
            return false;
        }

        return true;
    }

    /**
     * Guarda les dades del formulari dins un objecte Pelicula i ho manda a
     * guardar ó actualitzar, si està validat per
     *
     * @validarCamps()
     * @param evt
     */
    public void guardarEdicio(java.awt.event.MouseEvent evt) {
        if (this.validarCamps()) {//SI ELS CAMPS SON VÀLIDS, ANEM PER FEINA
            this.pEditar.setAny(Integer.parseInt(this.fieldAny.getText()));
            this.pEditar.setClassificacio((String) this.fieldClassificacio.getSelectedItem());
            this.pEditar.setDirector(this.fieldDirector.getText());
            this.pEditar.setDuracio(Integer.parseInt(this.fieldDuracio.getText()));
            this.pEditar.setSinopsis(this.fieldSinopsis.getText());
            this.pEditar.setTitol(this.fieldTitol.getText());
            //TODO: ASSIGNAR ELS GÈNERES
            this.pEditar.setGeneres(new HashSet(this.getGeneresSeleccionats()));
            //IMATGE
            if (this.rutaArxiu.getText() != this.pEditar.getRutaImatge()) {
                this.guardarImatgeFTP(this.rutaArxiu.getText());
                this.pEditar.setRutaImatge(new File(this.rutaArxiu.getText()).getName());
            }

            if (!this.afegirPeli) {
                // si estam en mode edició, actualitza
                rbd.actualitzarPelicula(this.pEditar);
            } else {
                // si estam en mode inserció, guarda
                rbd.guardarPelicula(this.pEditar);
            }
            this.mostrarAlert("Pel·lìcula guardada correctament");
            this.dialogEditarPeli.dispose();
            this.omplirPelicules();
            this.pEditar = null;
        }

    }

    /**
     * De tots els gèneres que s'han seleccionat per la pel·lícula els passa
     * d'String a objectes gènere, ho passa
     *
     * @return
     */
    public ArrayList<Genere> getGeneresSeleccionats() {

        ArrayList<Genere> generes = new ArrayList<Genere>();
        for (String g : this.generesSeleccionats) {
            for (Genere gen : rbd.getGeneres()) {
                if (g.equalsIgnoreCase(gen.getTitol())) {
                    generes.add(gen);
                }
            }
        }
        return generes;
    }

    /**
     * Guarda l'imatge dins l'FTP
     *
     * @param imatge
     */
    public void guardarImatgeFTP(String imatge) {

        FTPClient client = new FTPClient();
        //TODO: fer que ho fiqui al ftp que toca
        String sFTP = "port-au-prince.dreamhost.com";
        String sUser = "cartasmodelos";
        String sPassword = "motherfucker";
        FileInputStream fis;
        try {
            client.connect(sFTP);
            boolean login = client.login(sUser, sPassword);

            if (login) {
                File f = new File(imatge);

                fis = new FileInputStream(imatge);
                //TODO: fer que ho fiqui a la carpeta que toca
                client.storeFile(f.getName(), fis);

                fis.close();
                client.logout();
            } else {
                System.out.println("no s'ha conectat");
            }
        } catch (Exception ioe) {
            ioe.printStackTrace();
        }
    }

    /**
     * Mostra un jOptionPane amb el missatge passat per paràmetre
     * @param missatge
     */
    private void mostrarAlert(String missatge) {
        JOptionPane.showMessageDialog(null, missatge);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicial.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicial.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicial.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicial.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicial().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser SeleccionarArxiu;
    private javax.swing.JButton botoAceptarEditarPeli;
    private javax.swing.JButton botoAfegirPeli;
    private javax.swing.JMenuItem botoBorrarPeli;
    private javax.swing.JButton botoCancelarEditarPeli;
    private javax.swing.JMenuItem botoEditarPeli;
    private javax.swing.JButton botoSeleccionarPortada;
    private javax.swing.JComboBox comboSales;
    private javax.swing.JDialog dialogEditarPeli;
    private javax.swing.JDialog dialogGeneres;
    private javax.swing.JDialog dialogPase;
    private javax.swing.JTextField fieldAny;
    private javax.swing.JComboBox fieldClassificacio;
    private javax.swing.JTextField fieldDirector;
    private javax.swing.JTextField fieldDuracio;
    private javax.swing.JTextArea fieldSinopsis;
    private javax.swing.JTextField fieldTitol;
    private javax.swing.JComboBox horaPase;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox llistaPelicules;
    private javax.swing.JComboBox minutPase;
    private javax.swing.JPanel panelPases;
    private javax.swing.JPanel panelPelicules;
    private javax.swing.JPopupMenu popUpPelicules;
    private javax.swing.JLabel rutaArxiu;
    private org.jdesktop.swingx.JXDatePicker selectorCalendari;
    private javax.swing.JTable tablePases;
    private javax.swing.JTable tablePelicules;
    // End of variables declaration//GEN-END:variables
}
